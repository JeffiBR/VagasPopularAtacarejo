const wppconnect = require('@wppconnect-team/wppconnect');
const { io } = require("socket.io-client");
const axios = require('axios');
const fs = require('fs').promises; // Use promises for async file operations
const fsSync = require('fs'); // Use sync for initial checks/loads if needed
const path = require('path');
const { execFile } = require('child_process');

const TEMP_DIR = path.join(__dirname, 'temp');
if (!fsSync.existsSync(TEMP_DIR)) {
    fsSync.mkdirSync(TEMP_DIR, { recursive: true });
}

// --- Configura√ß√µes --- 
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY || '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'; // Prefer environment variable
const IA_MODEL = process.env.IA_MODEL || 'meta-llama/llama-4-maverick:free';
const SESSION_NAME = process.env.SESSION_NAME || 'atendente-pop-session';
const DATA_DIR = path.join(__dirname, 'data');
const OFERTAS_DIR = path.join(__dirname, 'ofertas');
const USER_DATA_FILE = path.join(DATA_DIR, 'user_data.json'); // File for persistent user data
const TIMEZONE = 'America/Sao_Paulo';
const MAX_HISTORICO_MENSAGENS = 15;
const PAUSA_ENTRE_IMAGENS_MS = 1000;
// N√∫mero para notificar quando pedirem atendente (DEFINIR PELO USU√ÅRIO - Exemplo)
const NUMERO_ATENDENTE = process.env.NUMERO_ATENDENTE || null; // Ex: '5511999998888@c.us'

// --- Configura√ß√µes da API Economiza Alagoas ---
const ECONOMIZA_ALAGOAS_TOKEN = process.env.ECONOMIZA_ALAGOAS_TOKEN || '0c80f47b7a0e3987fc8283c4a53e88c03191812a';
const ECONOMIZA_ALAGOAS_API_URL = 'http://api.sefaz.al.gov.br/sfz-economiza-alagoas-api/api/public/produto/pesquisa';
const ARAPIRACA_CODIGO_IBGE = '2700300';
const POPULAR_SUPERMERCADO_CNPJ = '07771407000161'; // CNPJ sem formata√ß√£o para a API

// --- Estados da Conversa --- 
const Estados = {
    IDLE: 'IDLE', // Estado padr√£o
    AWAITING_NAME: 'AWAITING_NAME', // Aguardando nome ap√≥s pergunta inicial
    PROCESSING_QUERY: 'PROCESSING_QUERY', // Processando consulta geral com IA
    PROCESSING_OFFER: 'PROCESSING_OFFER', // Processando pedido de ofertas
    PROCESSING_PRICE: 'PROCESSING_PRICE', // Processando consulta de pre√ßos
    AWAITING_HUMAN_CONFIRMATION: 'AWAITING_HUMAN_CONFIRMATION', // Aguardando confirma√ß√£o para chamar atendente
    HUMAN_REQUESTED: 'HUMAN_REQUESTED' // Usu√°rio pediu atendente, aguardando contato humano
};

// --- Fun√ß√µes de Transcri√ß√£o de √Åudio ---
const transcreverComAssemblyAI = async (caminhoAudio) => {
    const assemblyKey = '06cafbe793184fc088ac832f4c605d34';
    const uploadUrl = 'https://api.assemblyai.com/v2/upload';
    const transcribeUrl = 'https://api.assemblyai.com/v2/transcript';
    const buffer = await fs.readFile(caminhoAudio);

    // 1. Upload do √°udio
    const uploadRes = await axios.post(uploadUrl, buffer, {
        headers: {
            'authorization': assemblyKey,
            'content-type': 'application/octet-stream'
        }
    });

    const audioUrl = uploadRes.data.upload_url;

    // 2. Requisi√ß√£o de transcri√ß√£o
    const transcriptRes = await axios.post(transcribeUrl, {
        audio_url: audioUrl,
        language_code: 'pt'
    }, {
        headers: {
            'authorization': assemblyKey,
            'content-type': 'application/json'
        }
    });

    const transcriptId = transcriptRes.data.id;

    // 3. Esperar transcri√ß√£o (pooling simples)
    const checkStatus = async () => {
        const result = await axios.get(`${transcribeUrl}/${transcriptId}`, {
            headers: { 'authorization': assemblyKey }
        });
        if (result.data.status === 'completed') return result.data.text;
        if (result.data.status === 'error') throw new Error(result.data.error);
        await new Promise(resolve => setTimeout(resolve, 2000)); // espera 2s
        return checkStatus();
    };

    return await checkStatus();
};

const transcreverComWhisperLocal = (caminhoAudio) => {
    return new Promise((resolve, reject) => {
        const scriptPath = path.join(__dirname, 'transcrever.py');

        execFile('python', [scriptPath, caminhoAudio], (error, stdout, stderr) => {
            if (error) {
                console.error('‚ùå Erro ao executar Whisper local:', stderr);
                return reject(error);
            }
            resolve(stdout.trim());
        });
    });
};

// --- Gerenciamento de Dados Persistentes --- 
let userDataStore = {}; // Cache em mem√≥ria dos dados dos usu√°rios

/**
 * Carrega os dados dos usu√°rios do arquivo JSON para a mem√≥ria.
 */
const carregarDadosUsuarios = async () => {
    try {
        // Garante que o diret√≥rio de dados exista
        if (!fsSync.existsSync(DATA_DIR)) {
            fsSync.mkdirSync(DATA_DIR, { recursive: true });
            console.log(`[${getDataHoraAtual()}] üìÅ Diret√≥rio de dados criado em: ${DATA_DIR}`);
        }

        if (fsSync.existsSync(USER_DATA_FILE)) {
            const data = await fs.readFile(USER_DATA_FILE, 'utf-8');
            userDataStore = JSON.parse(data);
            console.log(`[${getDataHoraAtual()}] üíæ Dados de ${Object.keys(userDataStore).length} usu√°rios carregados de ${USER_DATA_FILE}`);
        } else {
            console.log(`[${getDataHoraAtual()}] ‚ÑπÔ∏è Arquivo ${USER_DATA_FILE} n√£o encontrado. Iniciando com dados vazios.`);
            userDataStore = {};
        }
    } catch (error) {
        console.error(`[${getDataHoraAtual()}] ‚ùå Erro cr√≠tico ao carregar ${USER_DATA_FILE}:`, error);
        console.warn(`[${getDataHoraAtual()}] ‚ö†Ô∏è Iniciando com dados de usu√°rio vazios devido a erro de carregamento.`);
        userDataStore = {}; // Reseta para evitar dados corrompidos
    }
};

/**
 * Salva o estado atual do userDataStore no arquivo JSON.
 * Fun√ß√£o Debounced para evitar escritas excessivas.
 */
let saveTimeout;
const salvarDadosUsuarios = (delay = 1000) => { // Salva ap√≥s 1 segundo de inatividade
    clearTimeout(saveTimeout);
    saveTimeout = setTimeout(async () => {
        try {
            await fs.writeFile(USER_DATA_FILE, JSON.stringify(userDataStore, null, 2)); // Pretty print JSON
            // console.log(`[${getDataHoraAtual()}] üíæ Dados de usu√°rios salvos em ${USER_DATA_FILE}`);
        } catch (error) {
            console.error(`[${getDataHoraAtual()}] ‚ùå Erro ao salvar dados em ${USER_DATA_FILE}:`, error);
        }
    }, delay);
};

/**
 * Obt√©m os dados de um usu√°rio espec√≠fico, inicializando se for novo.
 * @param {string} userId ID do usu√°rio (ex: 55119...).
 * @returns {object} Objeto com os dados do usu√°rio.
 */
const getDadosUsuario = (userId) => {
    if (!userDataStore[userId]) {
        console.log(`[${getDataHoraAtual()}] ‚ú® Novo usu√°rio detectado: ${userId}. Inicializando dados.`);
        userDataStore[userId] = {
            nome: null,
            estado: Estados.IDLE,
            mensagens: [],
            logs: [],
            ultimaInteracao: Date.now()
        };
        salvarDadosUsuarios(); // Salva imediatamente ao criar novo usu√°rio
    }
    // Atualiza timestamp da √∫ltima intera√ß√£o sempre que os dados s√£o acessados
    userDataStore[userId].ultimaInteracao = Date.now();
    return userDataStore[userId];
};

/**
 * Atualiza os dados de um usu√°rio espec√≠fico.
 * @param {string} userId ID do usu√°rio.
 * @param {object} novosDados Objeto com os campos a serem atualizados.
 */
const atualizarDadosUsuario = (userId, novosDados) => {
    if (!userDataStore[userId]) {
        console.warn(`[${getDataHoraAtual()}] ‚ö†Ô∏è Tentativa de atualizar dados de usu√°rio inexistente: ${userId}`);
        getDadosUsuario(userId); // Cria se n√£o existir
    }
    userDataStore[userId] = { ...userDataStore[userId], ...novosDados, ultimaInteracao: Date.now() };
    salvarDadosUsuarios(); // Agenda o salvamento
};

/**
 * Adiciona uma mensagem ao hist√≥rico do usu√°rio, respeitando o limite.
 * @param {string} userId
 * @param {{role: string, content: string}} mensagem
 */
const adicionarMensagemHistorico = (userId, mensagem) => {
    const userData = getDadosUsuario(userId);
    userData.mensagens.push(mensagem);
    if (userData.mensagens.length > MAX_HISTORICO_MENSAGENS) {
        userData.mensagens = userData.mensagens.slice(-MAX_HISTORICO_MENSAGENS);
    }
    atualizarDadosUsuario(userId, { mensagens: userData.mensagens });
};

/**
 * Adiciona um log/flag para o usu√°rio.
 * @param {string} userId
 * @param {string} log
 */
const adicionarLogUsuario = (userId, log) => {
    const userData = getDadosUsuario(userId);
    if (!userData.logs.includes(log)) {
        userData.logs.push(log);
        atualizarDadosUsuario(userId, { logs: userData.logs });
    }
};

// --- Fun√ß√µes Utilit√°rias Essenciais ---
const getDataHoraAtual = () => {
    return new Date().toLocaleString("pt-BR", { timeZone: TIMEZONE });
};

const logConsole = (level, message, ...args) => {
    const timestamp = getDataHoraAtual();
    const levelMap = { INFO: "‚ÑπÔ∏è", WARN: "‚ö†Ô∏è", ERROR: "‚ùå", DEBUG: "üêû" };
    console.log(`[${timestamp}] ${levelMap[level] || "‚û°Ô∏è"} ${message}`, ...args);
};

// --- Carregamento Seguro de Arquivos --- 
const carregarJsonSeguro = (filePath, defaultValue = {}) => {
    try {
        if (fsSync.existsSync(filePath)) {
            const data = fsSync.readFileSync(filePath, "utf-8");
            const jsonData = JSON.parse(data);
            logConsole("INFO", `Arquivo JSON carregado: ${path.basename(filePath)}`);
            return jsonData;
        } else {
            logConsole("WARN", `Arquivo JSON n√£o encontrado: ${filePath}. Usando valor padr√£o.`);
            return defaultValue;
        }
    } catch (error) {
        logConsole("ERROR", `Erro ao carregar ou parsear JSON ${filePath}:`, error);
        return defaultValue;
    }
};

// --- Carregamento Inicial de Dados (JSONs) ---
const informativosPath = path.join(DATA_DIR, "informativos.json");
const informativos = carregarJsonSeguro(informativosPath, { conteudo_base: [] });

const regionalismosPath = path.join(DATA_DIR, "regionalismos.json");
const regionalismos = carregarJsonSeguro(regionalismosPath, {
    "oxente": "nossa", "visse": "entendeu", "arretado": "muito bom", "cabra": "pessoa",
    "uai": "u√©", "s√¥": "mo√ßo", "trem": "coisa",
    "bah": "nossa", "guria": "menina", "guri": "menino", "tri": "legal",
    "√©gua": "nossa", "mana": "irm√£ ou amiga",
    "vc": "voc√™", "blz": "beleza", "pq": "porque", "tmj": "estamos juntos", "vlw": "valeu", "obg": "obrigado"
});

const palavrasProibidasPath = path.join(DATA_DIR, "palavras_proibidas.json");
const palavrasProibidas = carregarJsonSeguro(palavrasProibidasPath, [
    "besta", "idiota", "burro", "corno", "ot√°rio", "vagabundo", "merda", "porra", "caralho",
    "cacete", "desgra√ßa", "nojento", "imbecil", "babaca", "panaca", "arrombado", "fdp",
    "filho da puta", "escroto", "miser√°vel", "cretino", "maldito", "diabo", "inferno",
    "vai se ferrar", "vai se foder", "foda-se", "puta", "piranha", "safado", "cu", "buceta",
    "boquete", "rola", "pau no cu", "tomar no cu", "cuz√£o", "chupa meu pau"
]);

// --- Outras Fun√ß√µes Utilit√°rias ---
const normalizarTextoRegional = (texto) => {
    if (!texto || typeof texto !== "string") return "";
    let textoNormalizado = texto;
    for (const [giria, neutro] of Object.entries(regionalismos)) {
        const regex = new RegExp(`\\b${giria.replace(/[-\\/\\^$*+?.()|[\]{}]/g, "\\$&")}\\b`, "gi");
        textoNormalizado = textoNormalizado.replace(regex, neutro);
    }
    return textoNormalizado;
};

const identificarRegiao = (texto) => {
    if (!texto || typeof texto !== "string") return "Brasil";
    const textoLower = texto.toLowerCase();
    if (/\\b(oxente|visse|arretado|mainha|painho|mungunz√°|macaxeira|jerimum)\\b/.test(textoLower)) return "Nordeste";
    if (/\\b(uai|s√¥|trem|p√£o de queijo|quitanda)\\b/.test(textoLower)) return "Minas Gerais";
    if (/\\b(bah|guria|guri|tri|chimarr√£o|bergamota|capaz)\\b/.test(textoLower)) return "Sul";
    if (/\\b(√©gua|maninho|tacac√°|a√ßa√≠|pai d'√©gua)\\b/.test(textoLower)) return "Norte";
    return "Brasil";
};

const removerAcentosEPontuacao = (str) => {
    if (!str || typeof str !== "string") return "";
    return str
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/[.,!?;:()]/g, "");
};

/**
 * Consulta pre√ßos de produtos na API do Economiza Alagoas
 * Filtra apenas pelo Popular Supermercado e √∫ltimos 3 dias
 * @param {string} nomeProduto Nome do produto para pesquisar
 * @returns {Promise<object>} Resultado da consulta de pre√ßos
 */
const consultarPrecoEconomizaAlagoas = async (nomeProduto) => {
    try {
        const requestBody = {
            produto: {
                descricao: nomeProduto.toUpperCase()
            },
            estabelecimento: {
                individual: {
                    cnpj: POPULAR_SUPERMERCADO_CNPJ // Filtra apenas pelo Popular Supermercado
                }
            },
            dias: 3, // √öltimos 3 dias conforme solicitado
            pagina: 1,
            registrosPorPagina: 50 // M√≠nimo permitido pela API
        };

        const response = await axios.post(ECONOMIZA_ALAGOAS_API_URL, requestBody, {
            headers: {
                'AppToken': ECONOMIZA_ALAGOAS_TOKEN,
                'Content-Type': 'application/json'
            },
            timeout: 30000
        });

        return response.data;
    } catch (error) {
        logConsole('ERROR', `Erro ao consultar API Economiza Alagoas para produto "${nomeProduto}":`, error.message);
        throw error;
    }
};

/**
 * Formata a resposta da consulta de pre√ßos para envio ao usu√°rio
 * Foca apenas no Popular Supermercado e inclui marca/descri√ß√£o detalhada
 * @param {object} dadosAPI Dados retornados pela API do Economiza Alagoas
 * @param {string} nomeProduto Nome do produto pesquisado
 * @param {string} nomeCliente Nome do cliente
 * @returns {string} Mensagem formatada para o usu√°rio
 */
const formatarRespostaPrecos = (dadosAPI, nomeProduto, nomeCliente) => {
    if (!dadosAPI || !dadosAPI.conteudo || dadosAPI.conteudo.length === 0) {
        return `Opa, ${nomeCliente}! üòî N√£o encontrei "${nomeProduto}" no Popular Supermercado nos √∫ltimos 3 dias. Pode ser que o produto n√£o tenha sido vendido recentemente ou tenha outro nome. Tente pesquisar com uma descri√ß√£o mais espec√≠fica (ex: "arroz pil√£o 1kg")!`;
    }

    const totalRegistros = dadosAPI.totalRegistros || 0;
    const produtos = dadosAPI.conteudo.slice(0, 10); // Mostra mais produtos j√° que √© s√≥ um supermercado

    let resposta = `üõí **Popular Supermercado** - Encontrei ${totalRegistros} resultado(s) para "${nomeProduto}" nos √∫ltimos 3 dias:\n\n`;

    produtos.forEach((item, index) => {
        const produto = item.produto;
        const venda = produto.venda;
        
        // Extrai marca/descri√ß√£o mais detalhada
        const descricaoCompleta = produto.descricao || 'Produto';
        const descricaoSefaz = produto.descricaoSefaz || '';
        
        // Usa a descri√ß√£o da Sefaz se dispon√≠vel (geralmente mais padronizada)
        const descricaoFinal = descricaoSefaz && descricaoSefaz.trim() !== '' ? descricaoSefaz : descricaoCompleta;
        
        const preco = venda.valorVenda ? `R$ ${venda.valorVenda.toFixed(2).replace('.', ',')}` : 'Pre√ßo n√£o informado';
        const dataVenda = venda.dataVenda ? new Date(venda.dataVenda).toLocaleDateString('pt-BR') : 'Data n√£o informada';
        
        resposta += `${index + 1}. üì¶ **${descricaoFinal}**\n`;
        resposta += `   üí∞ ${preco}`;
        if (produto.unidadeMedida) {
            resposta += ` por ${produto.unidadeMedida}`;
        }
        if (produto.gtin && produto.gtin !== '0') {
            resposta += ` (C√≥d: ${produto.gtin})`;
        }
        resposta += `\n   üìÖ Pre√ßo atualizado em: ${dataVenda}\n\n`;
    });

    if (totalRegistros > 10) {
        resposta += `üìä Mostrando os 10 primeiros de ${totalRegistros} resultados encontrados.\n\n`;
    }

    resposta += `üè™ **Popular Supermercado** - Arapiraca/AL\n`;
    resposta += `üí° *Pre√ßos baseados em vendas reais dos √∫ltimos 3 dias. Os valores podem variar.*\n\n`;
    resposta += `Precisa de mais alguma coisa, ${nomeCliente}? üòä`;

    return resposta;
};

/**
 * Trata mensagens de √°udio, baixando-as e transcrevendo-as.
 * @param {object} message Objeto da mensagem do WPPConnect.
 * @param {object} client Inst√¢ncia do cliente WPPConnect.
 */
const tratarMensagemDeAudio = async (message, client) => {
    const userId = message.from;
    const userData = getDadosUsuario(userId);
    logConsole("INFO", `Recebido √°udio de ${userId}. Baixando...`);

    let caminhoAudio = null;
    try {
        await client.startTyping(userId);
        const buffer = await client.decryptFile(message);
        const nomeArquivo = `${message.id}.ogg`; // WPPConnect geralmente retorna OGG
        caminhoAudio = path.join(TEMP_DIR, nomeArquivo);
        await fs.writeFile(caminhoAudio, buffer);
        logConsole("INFO", `√Åudio de ${userId} salvo em: ${caminhoAudio}`);

        await client.sendText(userId, `Obrigado pelo √°udio, ${userData.nome || 'cliente'}! Estou transcrevendo... üéß`);

        let transcricao = "";
        // Tenta transcrever com Whisper local primeiro, se falhar, tenta AssemblyAI
        try {
            transcricao = await transcreverComWhisperLocal(caminhoAudio);
            logConsole("INFO", `Transcri√ß√£o local (Whisper) de ${userId} conclu√≠da.`);
        } catch (whisperError) {
            logConsole("WARN", `Falha na transcri√ß√£o local (Whisper) para ${userId}: ${whisperError.message}. Tentando AssemblyAI...`);
            try {
                transcricao = await transcreverComAssemblyAI(caminhoAudio);
                logConsole("INFO", `Transcri√ß√£o via AssemblyAI de ${userId} conclu√≠da.`);
            } catch (assemblyError) {
                logConsole("ERROR", `Falha na transcri√ß√£o via AssemblyAI para ${userId}: ${assemblyError.message}`);
                throw new Error("Ambos os servi√ßos de transcri√ß√£o falharam");
            }
        }

        if (transcricao && transcricao.trim().length > 0) {
            logConsole("INFO", `Transcri√ß√£o de ${userId}: "${transcricao}"`);
            await client.sendText(userId, `üé§ Sua mensagem de √°udio: "${transcricao}"`);
            
            // Cria uma nova mensagem simulada com a transcri√ß√£o para processar como texto
            const mensagemTexto = {
                ...message,
                body: transcricao,
                type: 'chat'
            };
            
            // Processa a transcri√ß√£o como uma mensagem de texto normal
            await tratarMensagemTexto(mensagemTexto, client);
        } else {
            await client.sendText(userId, `Desculpe, ${userData.nome || 'cliente'}, n√£o consegui transcrever seu √°udio. üòî Poderia tentar novamente ou digitar sua mensagem?`);
        }
    } catch (error) {
        logConsole("ERROR", `Erro ao processar √°udio de ${userId}:`, error);
        await client.sendText(userId, `Ops! Houve um erro ao processar seu √°udio, ${userData.nome || 'cliente'}. Por favor, tente novamente mais tarde ou digite sua mensagem.`);
    } finally {
        // Limpa o arquivo de √°udio tempor√°rio
        if (caminhoAudio && fsSync.existsSync(caminhoAudio)) {
            try {
                await fs.unlink(caminhoAudio);
                logConsole("INFO", `Arquivo tempor√°rio de √°udio removido: ${caminhoAudio}`);
            } catch (unlinkError) {
                logConsole("WARN", `Erro ao remover arquivo tempor√°rio ${caminhoAudio}:`, unlinkError);
            }
        }
        await client.stopTyping(userId);
    }
};

/**
 * Trata mensagens de texto (incluindo transcri√ß√µes de √°udio).
 * @param {object} message Objeto da mensagem do WPPConnect.
 * @param {object} client Inst√¢ncia do cliente WPPConnect.
 */
const tratarMensagemTexto = async (message, client) => {
    const userId = message.from;
    const textoOriginal = message.body || '';
    const textoLower = textoOriginal.toLowerCase();
    const userData = getDadosUsuario(userId);

    logConsole('DEBUG', `Mensagem recebida de ${userId} (Nome: ${userData.nome || 'N/A'}, Estado: ${userData.estado}): "${textoOriginal}"`);

    try {
        await client.sendSeen(userId);

        // --- L√≥gica baseada em ESTADO --- 

        // Estado: Aguardando Confirma√ß√£o para Atendimento Humano
        if (userData.estado === Estados.AWAITING_HUMAN_CONFIRMATION) {
            if (/\bsim\b|\bquero\b|\bconfirm(o|ar)\b|\bpode\b/i.test(textoLower)) {
                logConsole('INFO', `Usu√°rio ${userId} confirmou pedido de atendimento humano.`);
                atualizarDadosUsuario(userId, { estado: Estados.HUMAN_REQUESTED });
                await client.sendText(userId, `Ok, ${userData.nome || 'cliente'}! üëç J√° solicitei um atendente humano para voc√™. Por favor, aguarde um momento que logo algu√©m entrar√° em contato. Enquanto isso, n√£o consigo processar outras solicita√ß√µes.`);
                
                // Notifica√ß√£o para atendente
                if (NUMERO_ATENDENTE) {
                    try {
                        const nomeCliente = userData.nome || 'N√£o informado';
                        const msgNotificacao = `üîî *Solicita√ß√£o de Atendimento Humano* üîî\n\nCliente: ${nomeCliente} (${userId})\nSolicitou atendimento humano agora.\n\nLink direto: wa.me/${userId.split('@')[0]}`;
                        await client.sendText(NUMERO_ATENDENTE, msgNotificacao);
                        logConsole('INFO', `Notifica√ß√£o de atendimento enviada para ${NUMERO_ATENDENTE}`);
                    } catch (errNotify) {
                        logConsole('ERROR', `Falha ao notificar atendente ${NUMERO_ATENDENTE} sobre ${userId}`, errNotify);
                    }
                } else {
                    logConsole('WARN', `Usu√°rio ${userId} pediu atendente, mas NUMERO_ATENDENTE n√£o est√° configurado.`);
                }
                return;

            } else if (/\bn(√£|a)o\b|\bcancelar\b|\bdeixa\b/i.test(textoLower)) {
                logConsole('INFO', `Usu√°rio ${userId} cancelou pedido de atendimento humano.`);
                atualizarDadosUsuario(userId, { estado: Estados.IDLE });
                await client.sendText(userId, `Entendido, ${userData.nome || 'cliente'}! üòä Cancelamos a solicita√ß√£o. Se precisar de algo mais, √© s√≥ chamar!`);
                return;
            } else {
                await client.sendText(userId, `Desculpe, ${userData.nome || 'cliente'}, n√£o entendi. Voc√™ quer que eu chame um atendente humano? Por favor, responda com "Sim" ou "N√£o".`);
                return;
            }
        }

        // Estado: Atendimento Humano Solicitado (Bot n√£o interage mais ativamente)
        if (userData.estado === Estados.HUMAN_REQUESTED) {
            logConsole('INFO', `Mensagem recebida de ${userId} enquanto aguarda atendente. Bot n√£o responder√°.`);
            return;
        }

        // --- Fluxo Normal (Estado IDLE ou outros) --- 

        // 1. Detec√ß√£o de Pedido de Atendimento Humano
        const pediuAtendente = /\b(atendente|humano|pessoa|falar com alguem|algu(e|√©)m|suporte|ajuda real)\b/i.test(textoLower);
        if (pediuAtendente && !textoLower.includes('n√£o quero falar com atendente')) {
            logConsole('INFO', `Usu√°rio ${userId} parece estar pedindo atendimento humano.`);
            atualizarDadosUsuario(userId, { estado: Estados.AWAITING_HUMAN_CONFIRMATION });
            await client.sendText(userId, `Percebi que voc√™ talvez queira falar com um de nossos atendentes humanos, ${userData.nome || 'cliente'}. √â isso mesmo? üòä Responda "Sim" para confirmar ou "N√£o" para continuar comigo.`);
            return;
        }

        // 2. Captura de Nome
        const nomeMatch = textoOriginal.match(/(?:meu\s+)?nome\s+(?:√©|eh|seja)\s+(\w+)/i);
        if (userData.estado === Estados.IDLE && !userData.nome && nomeMatch && nomeMatch[1]) {
            const nomeCapturado = nomeMatch[1].charAt(0).toUpperCase() + nomeMatch[1].slice(1);
            atualizarDadosUsuario(userId, { nome: nomeCapturado, estado: Estados.IDLE });
            logConsole('INFO', `Nome de ${userId} definido como: ${nomeCapturado}`);
            await client.sendText(userId, `Prazer em conhecer, ${nomeCapturado}! üòä Como posso te ajudar hoje?`);
            adicionarMensagemHistorico(userId, { role: 'user', content: textoOriginal });
            adicionarMensagemHistorico(userId, { role: 'assistant', content: `Prazer em conhecer, ${nomeCapturado}! üòä Como posso te ajudar hoje?` });
            return;
        }

        // Se o bot n√£o sabe o nome e o usu√°rio manda a primeira msg
        if (userData.estado === Estados.IDLE && !userData.nome && userData.mensagens.length === 0) {
            logConsole('INFO', `Primeira intera√ß√£o de ${userId} sem nome. Solicitando nome.`);
            atualizarDadosUsuario(userId, { estado: Estados.AWAITING_NAME });
            await client.sendText(userId, 'Ol√°! üëã Sou o Atendente POP, seu assistente virtual. Para come√ßar, pode me dizer seu nome, por favor?');
            adicionarMensagemHistorico(userId, { role: 'user', content: textoOriginal });
            adicionarMensagemHistorico(userId, { role: 'assistant', content: 'Ol√°! üëã Sou o Atendente POP, seu assistente virtual. Para come√ßar, pode me dizer seu nome, por favor?' });
            return;
        }

        // Se estava aguardando nome e recebeu algo
        if (userData.estado === Estados.AWAITING_NAME) {
            const nomeCapturado = textoOriginal.trim().split(' ')[0];
            if (nomeCapturado.length > 2 && nomeCapturado.length < 20) {
                const nomeFormatado = nomeCapturado.charAt(0).toUpperCase() + nomeCapturado.slice(1);
                atualizarDadosUsuario(userId, { nome: nomeFormatado, estado: Estados.IDLE });
                logConsole('INFO', `Nome de ${userId} definido como: ${nomeFormatado} (estado AWAITING_NAME)`);
                await client.sendText(userId, `Legal, ${nomeFormatado}! üòä Agora sim. Em que posso te ajudar?`);
                adicionarMensagemHistorico(userId, { role: 'user', content: textoOriginal });
                adicionarMensagemHistorico(userId, { role: 'assistant', content: `Legal, ${nomeFormatado}! üòä Agora sim. Em que posso te ajudar?` });
            } else {
                await client.sendText(userId, 'Hum... n√£o entendi muito bem. ü§î Poderia repetir seu nome, por favor?');
                adicionarMensagemHistorico(userId, { role: 'user', content: textoOriginal });
                adicionarMensagemHistorico(userId, { role: 'assistant', content: 'Hum... n√£o entendi muito bem. ü§î Poderia repetir seu nome, por favor?' });
            }
            return;
        }

        // 3. Verifica√ß√£o de Palavr√µes
        const textoSemAcentos = removerAcentosEPontuacao(textoLower);
        const palavraoEncontrado = palavrasProibidas.find((p) => {
            const regex = new RegExp(`\\b${p}\\b`, 'i');
            return regex.test(textoSemAcentos);
        });
        if (palavraoEncontrado) {
            logConsole('WARN', `Palavra proibida detectada de ${userId}: "${palavraoEncontrado}"`);
            const respostasEducadas = [
                'üôè Opa! Vamos manter nossa conversa respeitosa, que tal? Estou aqui pra te ajudar da melhor maneira poss√≠vel. üòä',
                'Vamos manter o n√≠vel da conversa? Respeito √© bom e todo mundo gosta! ü§ó',
                'Por favor, evite usar esse tipo de linguagem. Podemos conversar de forma mais amig√°vel? üôè',
                '‚ö†Ô∏è Gentileza gera gentileza! Pe√ßo que use um tom mais respeitoso para que eu possa te ajudar melhor, combinado?',
            ];
            const respostaEscolhida = respostasEducadas[Math.floor(Math.random() * respostasEducadas.length)];
            await client.sendText(userId, respostaEscolhida);
            salvarDadosUsuarios();
            return;
        }

        // Adiciona mensagem do usu√°rio ao hist√≥rico ANTES de processar oferta ou IA
        adicionarMensagemHistorico(userId, { role: 'user', content: textoOriginal });

        // Emite evento para o painel (se conectado)
        if (typeof socket !== 'undefined') {
            socket.emit("nova_mensagem", {
                conversa_id: null,
                mensagem: {
                    cliente_id: userId,
                    conteudo: textoOriginal,
                    data_envio: new Date().toISOString()
                }
            });
        }

        // 4. T        // 4. Tratamento de Pedido de Ofertas do Dia (L√≥gica movida para ap√≥s a IA)estado: Estados.IDLE });
            }
            return;
        }

        // 5. Intera√ß√£o com IA (se n√£o for nenhuma das anteriores e estado for IDLE)
        if (userData.estado === Estados.IDLE) {
            atualizarDadosUsuario(userId, { estado: Estados.PROCESSING_QUERY });
            await client.startTyping(userId);
            let digitando = true;
            logConsole('INFO', `Enviando mensagem de ${userId} para IA...`);

            const nomeCliente = userData.nome || 'cliente';
            const regiao = identificarRegiao(textoOriginal);
            const textoNormalizado = normalizarTextoRegional(textoLower);

            const promptSystem = [
                `Voc√™ √© o Atendente POP, um assistente virtual de WhatsApp para nossa loja. Seja extremamente simp√°tico, prestativo, use linguagem informal brasileira e emojis üòäüéâüõí.`, 
                `O nome do cliente √© ${nomeCliente}. Use o nome dele(a) sempre que poss√≠vel (Ex: "Oi ${nomeCliente}!", "Claro, ${nomeCliente}!"). Se o nome for "cliente", *n√£o* pergunte o nome aqui, o sistema j√° tratou disso.`,
                `A regi√£o prov√°vel do cliente √© ${regiao}. Se apropriado e natural, use uma express√£o regional como "oxente", "uai", "bah", "√©gua", mas com modera√ß√£o.`, 
                `--- BASE DE CONHECIMENTO (Responda SOMENTE com base nisso) ---`, 
                ...(informativos.conteudo_base || []).map(item => `- ${item}`),
                `--------------------------------------------------------------`, 
                `REGRAS IMPORTANTES:`, 
                `1. FOCO NO CLIENTE: Seja acolhedor e paciente.`, 
                `2. BASE DE CONHECIMENTO √â TUDO: *N√ÉO invente* informa√ß√µes. Se a resposta n√£o estiver na base, diga algo como: "Puxa, ${nomeCliente}, sobre isso eu n√£o tenho a informa√ß√£o aqui comigo. ü§î Voc√™ pode verificar diretamente na loja ou com um de nossos atendentes humanos?".`, 
                `3. OFERTAS: Se perguntarem sobre "ofertas/promo√ß√µes/descontos", tente identificar o dia da semana mencionado (ex: "ofertas de segunda", "promo√ß√µes para o fim de semana"). Se identificar um dia, responda *APENAS* com o formato `[OFERTA_DIA: <Dia da Semana>]` (ex: `[OFERTA_DIA: Segunda-feira]`, `[OFERTA_DIA: S√°bado]`). Se n√£o identificar um dia espec√≠fico, mas for um pedido geral de ofertas, responda *APENAS*: "Estou buscando as ofertas do dia pra voc√™, ${nomeCliente}! S√≥ um instante! üõçÔ∏è". O sistema enviar√° as imagens. N√£o detalhe as ofertas aqui.`, 
                `4. CONSULTA DE PRE√áOS: Se perguntarem sobre pre√ßo de algum produto espec√≠fico (ex: "quanto custa leite", "pre√ßo do arroz", "valor da coca-cola"), responda *APENAS* com o formato `[CONSULTAR_PRECO: <nome do produto>]` (ex: `[CONSULTAR_PRECO: leite]`, `[CONSULTAR_PRECO: arroz]`). O sistema buscar√° os pre√ßos atuais em Arapiraca. N√£o invente pre√ßos.`,
                `5. ATENDENTE HUMANO: Se o cliente pedir para falar com um atendente/humano/pessoa/suporte, *N√ÉO responda diretamente*. O sistema cuidar√° disso. Apenas continue a conversa normalmente se for outro assunto.`,
                `6. EVITE REPETI√á√ÉO: Se precisar repetir uma informa√ß√£o, tente usar palavras diferentes.`, 
                `7. SEJA CONCISO: Respostas claras e diretas s√£o melhores no WhatsApp.`, 
                `8. TOM DE VOZ: Mantenha o tom amig√°vel e prestativo SEMPRE.`
            ].join('\n');

            const mensagensIA = [
                { role: 'system', content: promptSystem },
                ...userData.mensagens.filter(m => m.role === 'user' || m.role === 'assistant')
            ];

            const ultimaRespostaAssistant = userData.mensagens.filter(h => h.role === 'assistant').slice(-1)[0]?.content || '';

            try {
                const respostaIA = await axios.post(
                    'https://openrouter.ai/api/v1/chat/completions',
                    {
                        model: IA_MODEL,
                        messages: mensagensIA,
                        temperature: 0.7,
                        max_tokens: 150
                    },
                    {
                        headers: {
                            'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
                            'Content-Type': 'application/json',
                            'HTTP-Referer': 'http://localhost', 
                            'X-Title': 'WPP-Atendente-POP'
                        },
                        timeout: 20000
                    }
                );

                let textoIAResposta = respostaIA.data.choices?.[0]?.message?.content?.trim();

                if (!textoIAResposta) {
                    throw new Error('Resposta da IA vazia ou inv√°lida.');
                }

                if (textoIAResposta === ultimaRespostaAssistant) {
                    const alternativas = [
                        `Como eu disse antes, ${nomeCliente}: ${textoIAResposta}`, 
                        `Refor√ßando o que te falei, ${nomeCliente}: ${textoIAResposta}`, 
                        `S√≥ pra confirmar, ${nomeCliente}: ${textoIAResposta}`
                    ];
                    textoIAResposta = alternativas[Math.floor(Math.random() * alternativas.length)];
                }

                // --- Nova l√≥gica para identificar pedido de oferta com dia espec√≠fico da IA ---
                const ofertaDiaMatch = textoIAResposta.match(/\[OFERTA_DIA:\s*(.*?)\]/i);
                if (ofertaDiaMatch && ofertaDiaMatch[1]) {
                    const diaDaSemanaIA = ofertaDiaMatch[1].trim();
                    logConsole("INFO", `IA identificou pedido de oferta para o dia: ${diaDaSemanaIA}`);
                    atualizarDadosUsuario(userId, { estado: Estados.PROCESSING_OFFER });
                    await client.sendText(userId, `Entendido, ${userData.nome || 'cliente'}! Vou buscar as ofertas para ${diaDaSemanaIA} pra voc√™! üõçÔ∏è`);
                    await client.startTyping(userId);

                    try {
                        const diasSemana = ['Domingo', 'Segunda-feira', 'Ter√ßa-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'S√°bado'];
                        const nomeDiaNormalizado = diasSemana.find(d => d.toLowerCase() === diaDaSemanaIA.toLowerCase());

                        if (!nomeDiaNormalizado) {
                            await client.sendText(userId, `Desculpe, ${userData.nome || 'cliente'}, n√£o consegui identificar um dia v√°lido para as ofertas. Poderia especificar melhor?`);
                            return;
                        }

                        const pastaDoDia = path.join(OFERTAS_DIR, nomeDiaNormalizado);
                        const tagOfertaDia = `oferta-${nomeDiaNormalizado}-${new Date().toLocaleDateString('pt-BR')}`; // Tag para evitar reenvio no mesmo dia

                        if (userData.logs.includes(tagOfertaDia)) {
                            await client.sendText(userId, `üòâ ${userData.nome || 'Cliente'}, j√° te mandei as ofertas de ${nomeDiaNormalizado} mais cedo! Se precisar ver de novo, √© s√≥ pedir de outra forma ou falar com um atendente.`);
                            atualizarDadosUsuario(userId, { estado: Estados.IDLE });
                            return;
                        }

                        if (!fsSync.existsSync(OFERTAS_DIR)) fsSync.mkdirSync(OFERTAS_DIR, { recursive: true });
                        if (!fsSync.existsSync(pastaDoDia)) fsSync.mkdirSync(pastaDoDia, { recursive: true });

                        const arquivos = await fs.readdir(pastaDoDia);
                        const imagensOferta = arquivos.filter(arquivo => /\.(jpg|jpeg|png|webp)$/i.test(arquivo));
                        logConsole('DEBUG', `Arquivos encontrados na pasta ${pastaDoDia}:`, arquivos);
                        logConsole('DEBUG', `Imagens filtradas para envio:`, imagensOferta);

                        if (imagensOferta.length > 0) {
                            logConsole('INFO', `Imagens encontradas para ${nomeDiaNormalizado} (${userId}): ${imagensOferta.join(', ')}`);
                            await client.sendText(userId, `Aqui est√£o as ofertas especiais de ${nomeDiaNormalizado}! üéâ D√° uma olhada:`);
                            let imagensEnviadas = 0;
                            
                            for (const nomeArquivo of imagensOferta) {
                                const caminhoImagem = path.join(pastaDoDia, nomeArquivo);
                                try {
                                    await fs.access(caminhoImagem);
                                    const legenda = nomeArquivo.split(".")[0].replace(/[_-]/g, " ");
                                    await client.sendFile(userId, caminhoImagem, nomeArquivo, `‚ú® ${legenda.charAt(0).toUpperCase() + legenda.slice(1)} ‚ú®`);
                                    logConsole("INFO", `Imagem enviada com sucesso para ${userId}: ${nomeArquivo}`);
                                    imagensEnviadas++;
                                    await new Promise(resolve => setTimeout(resolve, PAUSA_ENTRE_IMAGENS_MS));
                                } catch (errImg) {
                                    logConsole("ERROR", `Erro ao enviar a imagem ${nomeArquivo} para ${userId}:`, errImg.message || errImg);
                                    await client.sendText(userId, `üò• Ops! N√£o consegui enviar a imagem "${nomeArquivo}". Vou tentar as pr√≥ximas.`);
                                }
                            }

                            if (imagensEnviadas > 0) {
                                adicionarLogUsuario(userId, tagOfertaDia);
                                await client.sendText(userId, `Pronto! üéâ Enviei ${imagensEnviadas} ofertas especiais para voc√™. Se tiver alguma d√∫vida ou quiser mais informa√ß√µes sobre algum produto, √© s√≥ perguntar!`);
                            } else {
                                await client.sendText(userId, `üòî Desculpe, ${userData.nome || 'cliente'}, n√£o consegui enviar as ofertas agora. Tente novamente mais tarde ou fale com um atendente.`);
                            }
                        } else {
                            await client.sendText(userId, `Opa, ${userData.nome || 'cliente'}! N√£o temos ofertas especiais para ${nomeDiaNormalizado} no momento. üòî Mas fique de olho que sempre temos novidades! Posso te ajudar com algo mais?`);
                        }
                    } catch (errorOferta) {
                        logConsole('ERROR', `Erro ao processar ofertas para ${userId}:`, errorOferta);
                        await client.sendText(userId, `Ops! Houve um problema ao buscar as ofertas, ${userData.nome || 'cliente'}. üòî Tente novamente mais tarde ou fale com um atendente.`);
                    } finally {
                        await client.stopTyping(userId);
                        atualizarDadosUsuario(userId, { estado: Estados.IDLE });
                    }
                    return; // Finaliza o processamento se a IA indicou um dia de oferta
                }
                // --- Fim da nova l√≥gica ---

                // --- Nova l√≥gica para identificar consulta de pre√ßos da IA ---
                const consultaPrecoMatch = textoIAResposta.match(/\[CONSULTAR_PRECO:\s*(.*?)\]/i);
                if (consultaPrecoMatch && consultaPrecoMatch[1]) {
                    const nomeProduto = consultaPrecoMatch[1].trim();
                    logConsole("INFO", `IA identificou consulta de pre√ßo para o produto: ${nomeProduto}`);
                    atualizarDadosUsuario(userId, { estado: Estados.PROCESSING_PRICE });
                    await client.sendText(userId, `Perfeito, ${userData.nome || 'cliente'}! Vou consultar os pre√ßos de "${nomeProduto}" em Arapiraca pra voc√™! üí∞ S√≥ um minutinho...`);
                    await client.startTyping(userId);

                    try {
                        const dadosPrecos = await consultarPrecoEconomizaAlagoas(nomeProduto);
                        const respostaFormatada = formatarRespostaPrecos(dadosPrecos, nomeProduto, userData.nome || 'cliente');
                        
                        await client.sendText(userId, respostaFormatada);
                        logConsole("INFO", `Consulta de pre√ßos enviada com sucesso para ${userId}: ${nomeProduto}`);
                        
                        // Adiciona ao hist√≥rico para a IA saber que foi processado
                        adicionarMensagemHistorico(userId, { role: 'assistant', content: respostaFormatada });
                        
                    } catch (errorPreco) {
                        logConsole('ERROR', `Erro ao consultar pre√ßos para ${userId}:`, errorPreco);
                        let msgErro;
                        
                        if (errorPreco.code === 'ECONNABORTED' || errorPreco.message.includes('timeout')) {
                            msgErro = `Ops! A consulta de pre√ßos est√° demorando mais que o esperado, ${userData.nome || 'cliente'}. üòî O sistema pode estar sobrecarregado. Tente novamente em alguns minutos.`;
                        } else if (errorPreco.response?.status === 500) {
                            msgErro = `Desculpe, ${userData.nome || 'cliente'}! O sistema de consulta de pre√ßos est√° temporariamente indispon√≠vel. üòî Tente novamente mais tarde ou fale com um atendente.`;
                        } else if (errorPreco.response?.status === 400) {
                            msgErro = `Hmm, ${userData.nome || 'cliente'}! N√£o consegui processar a consulta para "${nomeProduto}". ü§î Tente ser mais espec√≠fico na descri√ß√£o (ex: "arroz pil√£o 1kg") ou fale com um atendente.`;
                        } else {
                            msgErro = `Ops! Houve um problema ao consultar os pre√ßos de "${nomeProduto}" no Popular Supermercado, ${userData.nome || 'cliente'}. üòî Tente novamente mais tarde ou fale com um atendente.`;
                        }
                        
                        await client.sendText(userId, msgErro);
                        adicionarMensagemHistorico(userId, { role: 'assistant', content: msgErro });
                    } finally {
                        await client.stopTyping(userId);
                        atualizarDadosUsuario(userId, { estado: Estados.IDLE });
                    }
                    return; // Finaliza o processamento se a IA indicou consulta de pre√ßo
                }
                // --- Fim da l√≥gica de consulta de pre√ßos ---

                adicionarMensagemHistorico(userId, { role: 'assistant', content: textoIAResposta });
                await client.sendText(userId, textoIAResposta);
                logConsole('INFO', `Resposta da IA enviada com sucesso para ${userId}.`);

            } catch (errIA) {
                logConsole('ERROR', `Erro ao chamar a API da IA para ${userId}:`, errIA.response?.data || errIA.message);
                const fallbackMsg = `Desculpe, ${nomeCliente}, estou com um probleminha t√©cnico para processar sua pergunta agora. ü§Ø Por favor, tente novamente em alguns instantes ou, se preferir, pe√ßa para falar com um atendente humano.`;
                adicionarMensagemHistorico(userId, { role: 'assistant', content: fallbackMsg });
                await client.sendText(userId, fallbackMsg);
            } finally {
                if (digitando) await client.stopTyping(userId);
                atualizarDadosUsuario(userId, { estado: Estados.IDLE });
            }
        } else {
            logConsole('WARN', `Mensagem de ${userId} recebida em estado inesperado (${userData.estado}). Resetando para IDLE.`);
            atualizarDadosUsuario(userId, { estado: Estados.IDLE });
        }

    } catch (errorGeral) {
        logConsole('ERROR', `Erro GERAL ao processar mensagem de ${userId}:`, errorGeral);
        atualizarDadosUsuario(userId, { estado: Estados.IDLE });
        try {
            await client.sendText(userId, 'Ops! ü§Ø Ocorreu um erro inesperado aqui do meu lado. J√° estamos verificando. Por favor, tente novamente mais tarde.');
        } catch (errSend) {
            logConsole('ERROR', `Falha ao enviar mensagem de erro GERAL para ${userId}:`, errSend);
        }
    }
};

// --- Fun√ß√£o Principal de Inicializa√ß√£o --- 
async function start() {
    // Carrega dados persistentes ANTES de iniciar o cliente
    await carregarDadosUsuarios();

    let clientInstance = null; // Vari√°vel para guardar a inst√¢ncia do cliente
    let socket = null; // Vari√°vel para guardar a inst√¢ncia do socket

    wppconnect
        .create({
            session: SESSION_NAME,
            headless: false,
            devtools: false,
            useChrome: true,
            debug: false,
            logQR: true,
            browserArgs: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--no-first-run',
                '--no-zygote',
                '--disable-gpu'
            ],
            catchQR: (base64Qr, asciiQR, attempts, urlCode) => {
                logConsole('INFO', `Tentativa ${attempts} de gerar QR Code. Escaneie com o celular!`);
            },
            statusFind: (statusSession, session) => {
                logConsole('INFO', `Status da sess√£o (${session}): ${statusSession}`);
                if (['notLogged', 'browserClose', 'qrReadFail', 'serverClose', 'deviceNotConnected'].includes(statusSession)) {
                    logConsole('ERROR', `Problema cr√≠tico na sess√£o ${session}: ${statusSession}. O bot pode parar de funcionar.`);
                }
            },
        })
        .then((client) => {
            clientInstance = client; // Guarda a inst√¢ncia do cliente
            logConsole('INFO', `Atendente POP conectado com sucesso na sess√£o: ${SESSION_NAME}!`);
            
            // === Integra√ß√£o com Painel ===
            try {
                socket = io("http://localhost:5000", {
                    query: {
                        token: "painel-bot-token"
                    }
                });

                socket.on("connect", () => {
                    console.log("‚úÖ Bot conectado ao painel via WebSocket");
                });

                socket.on("disconnect", () => {
                    console.log("‚ùå Bot desconectado do painel");
                });

                // Recebe mensagens do painel para enviar ao cliente
                socket.on("mensagem_para_cliente", async ({ cliente_id, conteudo }) => {
                    if (cliente_id.endsWith('@g.us')) {
                        console.log(`‚ùå Mensagem bloqueada: tentativa de envio para grupo (${cliente_id}) ignorada.`);
                        return;
                    }

                    console.log(`üì© Mensagem recebida do painel: "${conteudo}" para ${cliente_id}`);
                    await client.sendText(cliente_id, conteudo);
                });
            } catch (socketError) {
                logConsole('WARN', 'Erro ao conectar com o painel via WebSocket:', socketError);
            }

            // --- Bloqueio de Fun√ß√µes de Status --- 
            const bloquearFuncoesStatus = () => {
                const funcoesParaBloquear = [
                    'sendTextStatus', 'sendImageStatus', 'sendVideoStatus', 'sendAudioStatus',
                    'sendLinkStatus', 'sendLocationStatus', 'sendVCardStatus', 'sendStickerStatus',
                    'sendImageAsStickerStatus'
                ];
                let countBloqueadas = 0;
                funcoesParaBloquear.forEach(funcName => {
                    if (typeof client[funcName] === 'function') {
                        client[funcName] = async (...args) => {
                            const userAttempting = args[0];
                            logConsole('WARN', `Bloqueado: Tentativa de chamar ${funcName} pelo usu√°rio ${userAttempting || 'desconhecido'}.`);
                            return Promise.resolve({ id: null, ack: -1, status: 'blocked', reason: 'Status posting is disabled.' });
                        };
                        countBloqueadas++;
                    }
                });
                logConsole('INFO', `Bloqueio de status aplicado. ${countBloqueadas} fun√ß√µes sobrescritas.`);
            };
            bloquearFuncoesStatus();

            // --- Tratamento Principal de Mensagens --- 
            client.onMessage(async (message) => {
                // Verifica se √© √°udio
                if (message.type === 'audio' || message.type === 'ptt') {
                    await tratarMensagemDeAudio(message, client);
                    return;
                }
                
                // Filtros b√°sicos
                if (!message || message.isGroupMsg || message.fromMe || !message.from || !message.from.endsWith('@c.us') || message.type === 'revoked') {
                    return;
                }

                // Processa mensagem de texto
                await tratarMensagemTexto(message, client);
            });

            // --- Tratamento de Desconex√£o/Erros do Cliente --- 
            client.onStateChange((state) => {
                logConsole('WARN', `Mudan√ßa de estado da sess√£o ${SESSION_NAME}: ${state}`);
                if (['CONFLICT', 'UNPAIRED', 'UNLAUNCHED'].includes(state)) {
                    logConsole('ERROR', `Estado cr√≠tico ${state} detectado! O bot pode precisar ser reiniciado ou o QR Code escaneado novamente.`);
                }
            });

        })
        .catch((error) => {
            logConsole('ERROR', `ERRO FATAL ao iniciar WPPConnect (${SESSION_NAME}):`, error);
            process.exit(1);
        });

    // --- Tratamento de Encerramento do Processo --- 
    const gracefulShutdown = async () => {
        logConsole('INFO', 'Recebido sinal de encerramento. Fechando conex√£o WPPConnect...');
        if (clientInstance) {
            try {
                await clientInstance.close();
                logConsole('INFO', 'Cliente WPPConnect fechado com sucesso.');
            } catch (err) {
                logConsole('ERROR', 'Erro ao fechar cliente WPPConnect:', err);
            }
        }

        // Garante que os dados pendentes sejam salvos
        clearTimeout(saveTimeout);
        try {
            if (Object.keys(userDataStore).length > 0) {
                fsSync.writeFileSync(USER_DATA_FILE, JSON.stringify(userDataStore, null, 2));
                logConsole('INFO', `Dados finais de usu√°rios salvos em ${USER_DATA_FILE}`);
            }
        } catch (error) {
            logConsole('ERROR', `Erro ao salvar dados finais em ${USER_DATA_FILE}:`, error);
        }
        process.exit(0);
    };

    process.on('SIGINT', gracefulShutdown); // Ctrl+C
    process.on('SIGTERM', gracefulShutdown); // Sinal de t√©rmino
}

// Inicia a aplica√ß√£o
start();

